// ######################################################################################### - FILE
/*! \file

http://en.wikipedia.org/wiki/Secure_Hash_Algorithm

\author Daniel Craig \par Copyright 2016, All Rights reserved.
*/
// ######################################################################################### - FILE

// ######################################################################################### - FILE
// Guard 
// ######################################################################################### - FILE
#ifndef XR_CORE_HASH_SHA_H
#define XR_CORE_HASH_SHA_H

#if defined( _MSC_VER )
#pragma once
#endif
// ######################################################################################### - FILE
/* Public Includes */
// ######################################################################################### - FILE
#ifndef XR_DEFINES_H
#error "Must include xr/defines.h first!"
#endif

// ######################################################################################### - FILE
/* Public Macros */
// ######################################################################################### - FILE

// ######################################################################################### - FILE
/* Forward Declarations */
// ######################################################################################### - FILE

// ######################################################################################### - FILE
/* Declarations */
// ######################################################################################### - FILE
namespace xr { namespace Core {

// ***************************************************************************************** - TYPE
/*! Calculate a SHA1_160 (160 bit)
    */
// ***************************************************************************************** - TYPE
class SHA1_160
{
public:
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    static const size_t kDigestSizeInBits  = 160;
    static const size_t kDigestSizeInBytes = kDigestSizeInBits/8;
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    struct Digest
    {
        uint8_t result[kDigestSizeInBytes];
    };

    // ------------------------------------------------------------------------------------  MEMBER
    /// Initialize a hash object
    // ------------------------------------------------------------------------------------  MEMBER
    SHA1_160();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Append a buffer to the hash operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Append(XR_IN_BYTES(sizeInBytes) const void *message, size_t sizeInBytes);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Finalize an operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Finalize();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Return the digest of a finalized operation
    // ------------------------------------------------------------------------------------  MEMBER
    void GetResult(Digest *d);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Reset the internal state to operate on a new buffer
    // ------------------------------------------------------------------------------------  MEMBER
    void Reset();

protected:
    void Transform(const uint8_t data[64] );

    uint64_t total;     /*!< number of bytes processed  */
    unsigned long state[5];     /*!< intermediate digest state  */
    unsigned char buffer[64];   /*!< data block being processed */
    static const uint8_t sha1_padding[64];

    bool     mFinalized;
};

// ***************************************************************************************** - TYPE
/*! Calculate a SHA1_256
    */
// ***************************************************************************************** - TYPE
class SHA1_256
{
public:
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    static const size_t kDigestSizeInBits  = 256;
    static const size_t kDigestSizeInBytes = kDigestSizeInBits/8;
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    struct Digest
    {
        uint8_t result[kDigestSizeInBytes];
    };

    // ------------------------------------------------------------------------------------  MEMBER
    /// Initialize a hash object
    // ------------------------------------------------------------------------------------  MEMBER
    SHA1_256();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Append a buffer to the hash operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Append(XR_IN_BYTES(sizeInBytes) const void *message, size_t sizeInBytes);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Finalize an operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Finalize();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Return the digest of a finalized operation
    // ------------------------------------------------------------------------------------  MEMBER
    void GetResult(Digest *d);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Reset the internal state to operate on a new buffer
    // ------------------------------------------------------------------------------------  MEMBER
    void Reset();

protected:
    void Transform(const uint8_t *buffer, size_t sizeInBytes);

    size_t    mTotalLength;                   ///< Total size
    size_t    mRemainingLength;               ///< Data remaining to be hashed
    uint8_t   mBlock[2 * kDigestSizeInBytes]; ///< data block being processed
    uint32_t  mState[8];                      ///< Hash state


    static const uint32_t sh0[8];
    static const uint32_t sk[64];
    static const size_t kBlockSizeBytes = (1024 / 8);
    bool     mFinalized;
};

// ***************************************************************************************** - TYPE
/*! Calculate a SHA1_512
    */
// ***************************************************************************************** - TYPE
class SHA1_512
{
public:
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    static const size_t kDigestSizeInBits  = 512;
    static const size_t kDigestSizeInBytes = kDigestSizeInBits/8;
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    struct Digest
    {
        uint8_t result[kDigestSizeInBytes];
    };

    // ------------------------------------------------------------------------------------  MEMBER
    /// Initialize a hash object
    // ------------------------------------------------------------------------------------  MEMBER
    SHA1_512();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Append a buffer to the hash operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Append(XR_IN_BYTES(sizeInBytes) const void *message, size_t sizeInBytes);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Finalize an operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Finalize();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Return the digest of a finalized operation
    // ------------------------------------------------------------------------------------  MEMBER
    void GetResult(Digest *d);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Reset the internal state to operate on a new buffer
    // ------------------------------------------------------------------------------------  MEMBER
    void Reset();

protected:
    void Transform(const uint8_t *buffer, size_t sizeInBytes);

    size_t    mTotalLength;                    ///< Total size
    size_t    mRemainingLength;                ///< Data remaining to be hashed
    uint8_t   mBlock[2 * kDigestSizeInBytes];  ///< data block being processed
    uint64_t  mState[8];                       ///< Hash state

    static const uint64_t sh0[8];
    static const uint64_t sk[80];
    static const size_t kBlockSizeBytes = (1024 / 8);
    bool     mFinalized;

};



// ***************************************************************************************** - TYPE
/*! Calculate a SHA1_224
    */
// ***************************************************************************************** - TYPE
class SHA1_224 : protected SHA1_256
{
public:
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    static const size_t kDigestSizeInBits  = 224;
    static const size_t kDigestSizeInBytes = kDigestSizeInBits/8;
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    struct Digest
    {
        uint8_t result[kDigestSizeInBytes];
    };

    // ------------------------------------------------------------------------------------  MEMBER
    /// Initialize a hash object
    // ------------------------------------------------------------------------------------  MEMBER
    SHA1_224();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Append a buffer to the hash operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Append(XR_IN_BYTES(sizeInBytes) const void *message, size_t sizeInBytes);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Finalize an operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Finalize();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Return the digest of a finalized operation
    // ------------------------------------------------------------------------------------  MEMBER
    void GetResult(Digest *d);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Reset the internal state to operate on a new buffer
    // ------------------------------------------------------------------------------------  MEMBER
    void Reset();

private:
    static const uint32_t sh0[8];
};

// ***************************************************************************************** - TYPE
/*! Calculate a SHA1_384
    */
// ***************************************************************************************** - TYPE
class SHA1_384 : protected SHA1_512
{
public:
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    static const size_t kDigestSizeInBits  = 384;
    static const size_t kDigestSizeInBytes = kDigestSizeInBits/8;
    // ------------------------------------------------------------------------------------  MEMBER
    // ------------------------------------------------------------------------------------  MEMBER
    struct Digest
    {
        uint8_t result[kDigestSizeInBytes];
    };

    // ------------------------------------------------------------------------------------  MEMBER
    /// Initialize a hash object
    // ------------------------------------------------------------------------------------  MEMBER
    SHA1_384();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Append a buffer to the hash operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Append(XR_IN_BYTES(sizeInBytes) const void *message, size_t sizeInBytes);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Finalize an operation
    // ------------------------------------------------------------------------------------  MEMBER
    void Finalize();
    // ------------------------------------------------------------------------------------  MEMBER
    /// Return the digest of a finalized operation
    // ------------------------------------------------------------------------------------  MEMBER
    void GetResult(Digest *d);
    // ------------------------------------------------------------------------------------  MEMBER
    /// Reset the internal state to operate on a new buffer
    // ------------------------------------------------------------------------------------  MEMBER
    void Reset();

private:
    static const uint64_t sh0[8];
};
}} // namespace
#endif //#ifndef XR_CORE_HASH_SHA_H
