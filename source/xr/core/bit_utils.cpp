// ######################################################################################### - FILE
/*!

\author Daniel Craig \par Copyright 2016, All Rights reserved.
*/
// ######################################################################################### - FILE

// ######################################################################################### - FILE
/* Includes */
// ######################################################################################### - FILE
#ifndef XR_DEFINES_H
#include "xr/defines.h"
#endif
#ifndef XR_CORE_BIT_UTILS_H
#include "xr/core/bit_utils.h"
#endif
#ifndef XR_CORE_ASSERT_H
#include "xr/core/assert.h"
#endif
// ######################################################################################### - FILE
/* Private Macros */
// ######################################################################################### - FILE
// ######################################################################################### - FILE
/* Implementation */
// ######################################################################################### - FILE
namespace xr { namespace Core {

// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingZeroes8(uint8_t x)
{
    if (x == 0) return 8;
    uint8_t n = 0;
    if ((x & XR_UINT8_C(0xF0)) == 0) { n +=  4, x <<=  4; }
    if ((x & XR_UINT8_C(0xC0)) == 0) { n +=  2, x <<=  2; }
    if ((x & XR_UINT8_C(0x80)) == 0) { n +=  1, x <<=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingZeroes16(uint16_t x)
{
    if (x == 0) return 16;
    uint8_t n = 0;
    if ((x & XR_UINT16_C(0xFF00)) == 0) { n +=  8, x <<=  8; }
    if ((x & XR_UINT16_C(0xF000)) == 0) { n +=  4, x <<=  4; }
    if ((x & XR_UINT16_C(0xC000)) == 0) { n +=  2, x <<=  2; }
    if ((x & XR_UINT16_C(0x8000)) == 0) { n +=  1, x <<=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingZeroes32(uint32_t x)
{
    if (x == 0) return 32;
    uint8_t n = 0;
    if ((x & XR_UINT32_C(0xFFFF0000)) == 0) { n += 16, x <<= 16; }
    if ((x & XR_UINT32_C(0xFF000000)) == 0) { n +=  8, x <<=  8; }
    if ((x & XR_UINT32_C(0xF0000000)) == 0) { n +=  4, x <<=  4; }
    if ((x & XR_UINT32_C(0xC0000000)) == 0) { n +=  2, x <<=  2; }
    if ((x & XR_UINT32_C(0x80000000)) == 0) { n +=  1, x <<=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingZeroes64(uint64_t x)
{
    if (x == 0) return 64;
    uint8_t n = 0;
    if ((x & XR_UINT64_C(0xFFFFFFFF00000000)) == 0) { n += 32, x <<= 32; }
    if ((x & XR_UINT64_C(0xFFFF000000000000)) == 0) { n += 16, x <<= 16; }
    if ((x & XR_UINT64_C(0xFF00000000000000)) == 0) { n +=  8, x <<=  8; }
    if ((x & XR_UINT64_C(0xF000000000000000)) == 0) { n +=  4, x <<=  4; }
    if ((x & XR_UINT64_C(0xC000000000000000)) == 0) { n +=  2, x <<=  2; }
    if ((x & XR_UINT64_C(0x8000000000000000)) == 0) { n +=  1, x <<=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingZeroes8(uint8_t x)
{
    if (x == 0) return 8;
    uint8_t n = 0;
    if ((x & XR_UINT8_C(0x0000000F)) == 0) { n +=  4, x >>=  4; }
    if ((x & XR_UINT8_C(0x00000003)) == 0) { n +=  2, x >>=  2; }
    if ((x & XR_UINT8_C(0x00000001)) == 0) { n +=  1, x >>=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingZeroes16(uint16_t x)
{
    if (x == 0) return 16;
    uint8_t n = 0;
    if ((x & XR_UINT16_C(0x000000FF)) == 0) { n +=  8, x >>=  8; }
    if ((x & XR_UINT16_C(0x0000000F)) == 0) { n +=  4, x >>=  4; }
    if ((x & XR_UINT16_C(0x00000003)) == 0) { n +=  2, x >>=  2; }
    if ((x & XR_UINT16_C(0x00000001)) == 0) { n +=  1, x >>=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingZeroes32(uint32_t x)
{
    if (x == 0) return 32;
    uint8_t n = 0;
    if ((x & XR_UINT32_C(0x0000FFFF)) == 0) { n += 16, x >>= 16; }
    if ((x & XR_UINT32_C(0x000000FF)) == 0) { n +=  8, x >>=  8; }
    if ((x & XR_UINT32_C(0x0000000F)) == 0) { n +=  4, x >>=  4; }
    if ((x & XR_UINT32_C(0x00000003)) == 0) { n +=  2, x >>=  2; }
    if ((x & XR_UINT32_C(0x00000001)) == 0) { n +=  1, x >>=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingZeroes64(uint64_t x)
{
    if (x == 0) return 64;
    uint8_t n = 0;
    if ((x & XR_UINT64_C(0x00000000FFFFFFFF)) == 0) { n += 32, x >>= 32; }
    if ((x & XR_UINT64_C(0x000000000000FFFF)) == 0) { n += 16, x >>= 16; }
    if ((x & XR_UINT64_C(0x00000000000000FF)) == 0) { n +=  8, x >>=  8; }
    if ((x & XR_UINT64_C(0x000000000000000F)) == 0) { n +=  4, x >>=  4; }
    if ((x & XR_UINT64_C(0x0000000000000003)) == 0) { n +=  2, x >>=  2; }
    if ((x & XR_UINT64_C(0x0000000000000001)) == 0) { n +=  1, x >>=  1; }
    return n;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingOnes8(uint8_t x)
{
    return CountLeadingZeroes8(uint8_t(~x));
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingOnes16(uint16_t x)
{
    return CountLeadingZeroes16(uint16_t(~x));
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingOnes32(uint32_t x)
{
    return CountLeadingZeroes32(~x);
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountLeadingOnes64(uint64_t x)
{
    return CountLeadingZeroes64(~x);
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingOnes8(uint8_t x)
{
    return CountTrailingZeroes8(uint8_t(~x));
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingOnes16(uint16_t x)
{
    return CountTrailingZeroes16(uint16_t(~x));
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingOnes32(uint32_t x)
{
    return CountTrailingZeroes32(~x);
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
uint8_t CountTrailingOnes64(uint64_t x)
{
    return CountTrailingZeroes64(~x);
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasNULL8(uint32_t x)
{
    return  (((x) - XR_UINT32_C(0x01010101)) & ~(x) & XR_UINT32_C(0x80808080)) != 0;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasNULL8(uint64_t x)
{
    return  (((x) - XR_UINT64_C(0x0101010101010101)) & ~(x) & XR_UINT64_C(0x8080808080808080)) != 0;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasWord8(uint32_t x, uint8_t b)
{
    return  HasNULL8(  x ^ (XR_UINT32_C(~0)/255 * b) );
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasWord8(uint64_t x, uint8_t b)
{
    return  HasNULL8(  x ^ (XR_UINT64_C(~0)/255 * b) );
}

// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasNULL16(uint32_t x)
{
    return  (((x) - XR_UINT32_C(0x00010001)) & ~(x) & XR_UINT32_C(0x80008000)) != 0;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasNULL16(uint64_t x)
{
    return  (((x) - XR_UINT64_C(0x0001000100010001)) & ~(x) & XR_UINT64_C(0x8000800080008000)) != 0;
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasWord16(uint32_t x, uint16_t b)
{
    return  HasNULL16(  x ^ (XR_UINT32_C(~0)/((1<<16)-1) * b) );
}
// --------------------------------------------------------------------------------------  FUNCTION
// --------------------------------------------------------------------------------------  FUNCTION
bool HasWord16(uint64_t x, uint16_t b)
{
    return  HasNULL16(  x ^ (XR_UINT64_C(~0)/((1<<16)-1) * b) );
}

}} //namespace 
// ######################################################################################### - FILE
/* Compile Time Asserts */
// ######################################################################################### - FILE
//static_assert(expr, "")
